@page "/blazor3d"

@using Blazor3D.Viewers
@using Blazor3D.Settings
@using Blazor3D.Scenes
@using Blazor3D.Lights
@using Blazor3D.Maths
@using Blazor3D.Materials
@using Blazor3D.Objects
@using Blazor3D.Geometires
@using Blazor3D.Enums
@using Blazor3D.Cameras
@using Blazor3D.Helpers
@using Blazor3D.Events
@implements IDisposable

<PageTitle>Blazor 3D</PageTitle>

<MudPaper Elevation="2" Class="p-3 my-3">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="text-gradient">Blazor 3D</MudText>
    <MudText Class="mb-8">This component demonstrates 3D on Blazor</MudText>
</MudPaper>

<div class="row justify-content-center">
    <div class="v3d">
        <Viewer @ref="View3D1" ViewerSettings=@settings Scene=scene />
    </div>
</div>

@code {
    private Viewer View3D1 = null!;
    private Guid objGuid;
    private string msg = string.Empty;
    private ViewerSettings settings = new ViewerSettings()
        {
            ContainerId = "example1",
            CanSelect = true,// default is false
            SelectedColor = "black",
            WebGLRendererSettings = new WebGLRendererSettings
            {
                Antialias = false // if you need poor quality for some reasons
            }
        };

    private Scene scene = new Scene();

    public void Dispose()
    {
        View3D1.ObjectSelected -= OnObjectSelected;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // subscribe events only once
            View3D1.ObjectSelected += OnObjectSelected;
        }

        //return await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        scene.Add(new AmbientLight());
        scene.Add(new PointLight()
            {
                Position = new Vector3(1, 3, 0)
            });
        scene.Add(new Mesh());
        scene.Add(new Mesh
            {
                Geometry = new BoxGeometry(width: 1.2f, height: 0.5f),
                Position = new Vector3(-2, 0, 0),
                Material = new MeshStandardMaterial()
                {
                    Color = "magenta"
                }
            });

        scene.Add(new Mesh
            {
                Geometry = new CircleGeometry(radius: 0.75f, segments: 12),
                Position = new Vector3(2, 0, 0),
                Scale = new Vector3(1, 0.75f, 1),
                Material = new MeshStandardMaterial()
                {
                    Color = "pink"
                }
            });

        scene.Add(new Mesh
            {
                Geometry = new CapsuleGeometry(radius: 0.5f, length: 2),
                Position = new Vector3(-4, 0, 0),
                Material = new MeshStandardMaterial()
                {
                    Color = "darkgreen"
                }
            });

        scene.Add(new Mesh
            {
                Geometry = new ConeGeometry(radius: 0.5f, height: 2, radialSegments: 16),
                Position = new Vector3(4, 0, 0),
                Material = new MeshStandardMaterial()
                {
                    Color = "green",
                    FlatShading = true,
                    Metalness = 0.5f,
                    Roughness = 0.5f
                }
            });

        scene.Add(new Mesh
            {
                Geometry = new CylinderGeometry(radiusTop: 0.5f, height: 1.2f, radialSegments: 16),
                Position = new Vector3(0, 0, -2),
                Material = new MeshStandardMaterial()
                {
                    Color = "red",
                    Wireframe = true
                }
            });
        scene.Add(new Mesh
            {
                Geometry = new DodecahedronGeometry(radius: 0.8f),
                Position = new Vector3(-2, 0, -2),
                Material = new MeshStandardMaterial()
                {
                    Color = "darkviolet",
                    Metalness = 0.5f,
                    Roughness = 0.5f
                }
            });

        scene.Add(new Mesh
            {
                Geometry = new IcosahedronGeometry(radius: 0.8f),
                Position = new Vector3(-4, 0, -2),
                Material = new MeshStandardMaterial()
                {
                    Color = "violet"
                }
            });

        scene.Add(new Mesh
            {

                Geometry = new OctahedronGeometry(radius: 0.75f),
                Position = new Vector3(2, 0, -2),
                Material = new MeshStandardMaterial()
                {
                    Color = "aqua"
                }
            });

        scene.Add(new Mesh
            {
                Geometry = new PlaneGeometry(width: 0.5f, height: 2),
                Position = new Vector3(4, 0, -2),
                Material = new MeshStandardMaterial()
                {
                    Color = "purple"
                }
            });
        scene.Add(new Mesh
            {
                Geometry = new RingGeometry(innerRadius: 0.6f, outerRadius: 0.7f),
                Position = new Vector3(0, 0, -4),
                Material = new MeshStandardMaterial()
                {
                    Color = "DodgerBlue"
                }
            });
        scene.Add(new Mesh
            {
                Geometry = new SphereGeometry(radius: 0.6f),
                Position = new Vector3(-2, 0, -4),
                Material = new MeshStandardMaterial()
                {
                    Color = "darkgreen"
                },
            });
        scene.Add(new Mesh
            {
                Geometry = new TetrahedronGeometry(radius: 0.75f),
                Position = new Vector3(2, 0, -4),
                Material = new MeshStandardMaterial()
                {
                    Color = "lightblue"
                }
            });
        scene.Add(new Mesh
            {
                Geometry = new TorusGeometry(radius: 0.6f, tube: 0.4f, radialSegments: 12, tubularSegments: 12),
                Position = new Vector3(4, 0, -4),
                Material = new MeshStandardMaterial()
                {
                    Color = "lightgreen"
                }
            });
        scene.Add(new Mesh
            {
                Geometry = new TorusKnotGeometry(radius: 0.6f, tube: 0.1f),
                Position = new Vector3(-4, 0, -4),
                Material = new MeshStandardMaterial()
                {
                    Color = "RosyBrown"
                }
            });
        //return base.OnInitialized();
    }

    private void OnObjectSelected(Object3DArgs e)
    {
        foreach (var item in scene.Children)
        {
            if (item.Uuid == e.UUID)
            {
                this.msg = $"Selected object with id = {e.UUID} and type {item.Type}";
                StateHasChanged();
                break;
            }
        }
    }
}
