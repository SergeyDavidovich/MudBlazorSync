@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager
@inject MudBlazorSync.Application.AppState appState

<MudThemeProvider IsDarkMode="@isMudDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudOverlay Class="overlay" Visible="isOverlayVisible" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudLayout Class="layout">
    <MudAppBar Elevation="2">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"
                       Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudToggleIconButton Icon="@Icons.Material.Filled.BrightnessHigh" Color="Color.Inherit" Toggled=@isMudDarkMode
                             ToggledIcon="@Icons.Material.Filled.BrightnessLow" ToggledChanged="@(_=>ThemeToggle())" />
    </MudAppBar>

    <MudDrawer @bind-Open="drawerOpen" Elevation="4" Style="height:100vh">
        @*  <MudDrawerHeader Style="background-color:darkslategrey; height:var(--mud-appbar-height)">
        <MudText Align=Align.End Typo="Typo.h6" Class="text-gradient pb-16">Mud + Sync</MudText>
        </MudDrawerHeader>*@
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        <CascadingValue Name="IsDarkMode" Value=@isMudDarkMode>
            <MudContainer MaxWidth="MaxWidth.Large" Class="pt-8">
                @Body
            </MudContainer>
        </CascadingValue>
    </MudMainContent>
</MudLayout>
<style>
    .layout {
        height: 100vh;
    }

    .overlay {
        height: 100vh;
        position: absolute;
        background-color: rgb(25, 25, 25, 1);
        z-index: 1000;
    }
</style>
@code {
    bool drawerOpen = true;
    bool isOverlayVisible;

    bool isDarkMode;
    bool isMudDarkMode;
    bool isSyncDarkMode;

    private void DrawerToggle() => drawerOpen = !drawerOpen;
    private void SetDarkTheme() => isDarkMode = true;

    protected override async Task OnInitializedAsync()
    {
        SetDarkTheme();

        SetMudTheme(isDarkMode);

        isOverlayVisible = true;

        SetSyncTheme(isDarkMode);
        await Task.Delay(600);
        isOverlayVisible = false;
        StateHasChanged();

        //appState.SetDarkTheme(isDarkMode);
    }

    private async Task ThemeToggle()
    {
        isDarkMode = !isDarkMode;
        isMudDarkMode = isDarkMode;
        isSyncDarkMode = isDarkMode;

        SetMudTheme(isDarkMode);

        isOverlayVisible = true;

        SetSyncTheme(isSyncDarkMode);
        await Task.Delay(600);

        appState.SetDarkTheme(isMudDarkMode);
        isOverlayVisible = false;
        StateHasChanged();
    }

    private void SetMudTheme(bool isDark) => isMudDarkMode = isDark;
    
    private void SetSyncTheme(bool isDark)
    {
        if (isDark)
        {
            JSRuntime.InvokeAsync<string>("setTheme", "bootstrap5-dark");
        }
        else
        {
            JSRuntime.InvokeAsync<string>("setTheme", "bootstrap5");
        }

    }
}
